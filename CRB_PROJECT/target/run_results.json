{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/run-results/v6.json", "dbt_version": "1.8.7", "generated_at": "2025-04-08T18:50:04.954969Z", "invocation_id": "b97bfb45-8be6-4736-9380-60aad44fdf2d", "env": {}}, "results": [{"status": "success", "timing": [{"name": "compile", "started_at": "2025-04-08T18:50:03.649047Z", "completed_at": "2025-04-08T18:50:03.672577Z"}, {"name": "execute", "started_at": "2025-04-08T18:50:03.672577Z", "completed_at": "2025-04-08T18:50:04.829131Z"}], "thread_id": "Thread-1 (worker)", "execution_time": 1.290675163269043, "adapter_response": {"_message": "SUCCESS 1", "code": "SUCCESS", "rows_affected": 1, "query_id": "01bb8eaa-3201-873a-000c-493e000725da"}, "message": "SUCCESS 1", "failures": null, "unique_id": "model.CRB_PROJECT.final_report", "compiled": true, "compiled_code": "WITH base_transactions AS (\n    SELECT\n        customer_id,\n        product_id,\n        DATE_TRUNC('MONTH', payment_month) AS payment_month,\n        revenue,\n        revenue_type\n    FROM PROJECT_DB.PROJECT_SCHEMA_stage.stg_transactions\n),\n\nfiscal_calculation AS (\n    SELECT DISTINCT\n        payment_month,\n        CASE \n            WHEN DATE_PART('month', payment_month) BETWEEN 1 AND 3 \n            THEN DATEADD('year', -1, DATE_TRUNC('year', payment_month))\n            ELSE DATE_TRUNC('year', payment_month)\n        END AS fiscal_year\n    FROM base_transactions\n),\n\ncustomer_movement AS (\n    SELECT\n        t.customer_id,\n        c.customer_name,\n        t.payment_month,\n        fc.fiscal_year,\n        SUM(t.revenue) AS current_arr,\n        SUM(CASE WHEN t.revenue_type = 1 THEN t.revenue ELSE 0 END) AS upsold_arr,\n        LAG(SUM(t.revenue), 1) OVER (PARTITION BY t.customer_id ORDER BY t.payment_month) AS prev_arr,\n        COUNT(DISTINCT t.product_id) AS product_count,\n        LAG(COUNT(DISTINCT t.product_id), 1) OVER (PARTITION BY t.customer_id ORDER BY t.payment_month) AS prev_product_count,\n        MAX(CASE WHEN c.company IS NOT NULL THEN 1 ELSE 0 END) AS is_logo\n    FROM base_transactions t\n    JOIN PROJECT_DB.PROJECT_SCHEMA_stage.stg_customers c ON t.customer_id = c.customer_id\n    JOIN fiscal_calculation fc ON t.payment_month = fc.payment_month\n    GROUP BY 1, 2, 3, 4\n),\n\ncross_sell_revenue AS (\n    SELECT \n        t.payment_month,\n        SUM(t.revenue) AS cross_sell_revenue\n    FROM PROJECT_DB.PROJECT_SCHEMA_stage.stg_transactions t\n    WHERE EXISTS (\n        SELECT 1\n        FROM PROJECT_DB.PROJECT_SCHEMA_stage.stg_transactions sub\n        WHERE sub.customer_id = t.customer_id\n          AND sub.payment_month = t.payment_month\n        GROUP BY sub.customer_id, sub.payment_month\n        HAVING COUNT(DISTINCT sub.product_id) > 1\n    )\n    GROUP BY t.payment_month\n),\n\nrevenue_movement AS (\n    SELECT\n        cm.payment_month,\n        cm.fiscal_year,\n\n        -- Customer Metrics\n        COUNT(DISTINCT CASE WHEN cm.prev_arr IS NULL AND cm.current_arr > 0 THEN cm.customer_id END) AS new_logos,\n        COUNT(DISTINCT CASE WHEN cm.current_arr = 0 AND cm.prev_arr > 0 THEN cm.customer_id END) AS customer_churn,\n        COUNT(DISTINCT CASE WHEN cm.product_count < cm.prev_product_count THEN cm.customer_id END) AS product_churn,\n\n        -- Revenue Metrics\n        SUM(CASE WHEN cm.prev_arr IS NULL THEN cm.current_arr ELSE 0 END) AS new_arr,\n        SUM(cm.upsold_arr) AS upsell,\n        SUM(CASE WHEN cm.current_arr < cm.prev_arr THEN cm.prev_arr - cm.current_arr ELSE 0 END) AS downsell,\n\n        -- Total ARR\n        SUM(cm.current_arr) AS current_arr_total,\n        SUM(cm.prev_arr) AS prev_arr_total\n    FROM customer_movement cm\n    GROUP BY 1, 2\n),\n\nfinal_metrics AS (\n    SELECT\n        rm.payment_month,\n        rm.fiscal_year,\n        rm.customer_churn,\n        rm.downsell,\n        rm.product_churn,\n        -- GRR: [(Starting Revenue - Churn - Product Churn - Downsell) / Starting Revenue] * 100\n        ROUND(\n            (rm.prev_arr_total - rm.customer_churn - rm.product_churn - rm.downsell) \n            / NULLIF(rm.prev_arr_total, 0) * 100, \n            2\n        ) AS grr,\n        rm.upsell,\n        cs.cross_sell_revenue AS crosssell,\n        -- NRR: [(Starting + Upsell + Cross-sell - Churn - Downsell) / Starting] * 100\n        ROUND(\n            (rm.prev_arr_total + rm.upsell + cs.cross_sell_revenue - rm.customer_churn - rm.downsell) \n            / NULLIF(rm.prev_arr_total, 0) * 100, \n            2\n        ) AS nrr,\n        rm.new_logos,\n        rm.current_arr_total,\n    FROM revenue_movement rm\n    LEFT JOIN cross_sell_revenue cs ON rm.payment_month = cs.payment_month\n)\n\nSELECT * FROM\n    final_metrics\nORDER BY payment_month", "relation_name": "PROJECT_DB.PROJECT_SCHEMA_report.final_report"}], "elapsed_time": 4.46784234046936, "args": {"show_resource_report": false, "version_check": true, "log_level": "info", "cache_selected_only": false, "partial_parse": true, "printer_width": 80, "quiet": false, "introspect": true, "indirect_selection": "eager", "source_freshness_run_project_hooks": false, "use_colors": true, "log_format_file": "debug", "invocation_command": "dbt run --select final_report", "log_file_max_bytes": 10485760, "log_path": "D:\\DE_assessment\\CRB_PROJECT\\logs", "use_colors_file": true, "vars": {}, "defer": false, "which": "run", "write_json": true, "print": true, "populate_cache": true, "enable_legacy_logger": false, "strict_mode": false, "warn_error_options": {"include": [], "exclude": []}, "macro_debugging": false, "select": ["final_report"], "send_anonymous_usage_stats": true, "empty": false, "favor_state": false, "partial_parse_file_diff": true, "profiles_dir": "C:\\Users\\varsh\\.dbt", "require_explicit_package_overrides_for_builtin_materializations": true, "static_parser": true, "project_dir": "D:\\DE_assessment\\CRB_PROJECT", "require_resource_names_without_spaces": false, "exclude": [], "log_level_file": "debug", "log_format": "default"}}